name: Docker Image CI

on:
  workflow_dispatch:  # manual trigger
  schedule:
      # ┌───────────── minute (0 - 59)
      # │ ┌───────────── hour (0 - 23)
      # │ │ ┌───────────── day of the month (1 - 31)
      # │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
      # │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
      # │ │ │ │ │
      # │ │ │ │ │
      # │ │ │ │ │
      # * * * * *
    - cron: '0 0 * * 1'  # build every Monday
  push:
    branches: [ main, dev ]
    tags:
      - '*.*.*'
  pull_request:
    branches: [ main ]


jobs:

  build:

    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: public.ecr.aws/r4f2m1l8/android

    steps:
    - uses: actions/checkout@v2

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: public.ecr.aws/r4f2m1l8/android
        labels: |
          org.opencontainers.image.url=https://gallery.ecr.aws/r4f2m1l8/android
          org.opencontainers.image.vendor=Sampingan Tech

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: amd64,arm64

    - name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Pre build
      run: |
        echo "GITHUB_REF: $GITHUB_REF"
        echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
        echo "GITHUB_EVENT_PATH: $GITHUB_EVENT_PATH"
        echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
        echo "GITHUB_ACTION: $GITHUB_ACTION"
        echo "GITHUB_JOB: $GITHUB_JOB"

        uname -a
        df -h
        docker images
        docker ps -a
        echo "GITHUB_SHA: $GITHUB_SHA"

        # Remove exist images to free disk space
        docker image prune -a -f
        #docker rmi $(docker images | grep -v IMAGE | awk '{print $3}')
        docker images

        # check disk space one more time
        df -h

    - name: Build local docker image for test
      # if: github.event_name != 'pull_request'
      run: |
        TAG=$GITHUB_SHA
        docker build . \
            --file Dockerfile \
            --tag $IMAGE_NAME:$TAG

    - name: Inspect local docker image
      run: |
        TAG=$GITHUB_SHA
        docker images
        docker inspect $IMAGE_NAME:$TAG

    - name: Test
      run: |
        TAG=$GITHUB_SHA
        docker run --rm $IMAGE_NAME:$TAG env

        echo "Show current java version"
        docker run --rm $IMAGE_NAME:$TAG java -version

        echo "Set java env to 8"
        docker run --rm $IMAGE_NAME:$TAG bash -c ". $HOME/.bash_profile; jenv local 8; java -version"

        docker run -v `pwd`:/project --rm $IMAGE_NAME:$TAG bash -c 'echo "Current directory: $PWD"'

        docker run --rm $IMAGE_NAME:$TAG bash -c 'ls -l $ANDROID_SDK_HOME'

        cd test_projects/SampleProject/
        docker run --rm -v `pwd`:/project $IMAGE_NAME:$TAG bash -c './gradlew build'

    - name: Remove local docker image
      run: |
        TAG=$GITHUB_SHA
        docker rmi $IMAGE_NAME:$TAG

    # - name: Login to DockerHub
    #   # if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    #   if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/'))
    #   uses: docker/login-action@v1
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/'))
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/'))
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/'))
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: android
        IMAGE_TAG: android:latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # - name: Build and push
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: .
    #     # Android SDK not support arm64 yet
    #     # platforms: linux/amd64,linux/arm64
    #     platforms: linux/amd64
    #     # platforms: linux/arm64
    #     # push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
    #     push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/')) }}
    #     tags: sampingan/android:latest,${{ steps.meta.outputs.tags }}
    #     labels: ${{ steps.meta.outputs.labels }}
